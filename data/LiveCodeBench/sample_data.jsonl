{"id": "LCB_001", "title": "Two Sum", "difficulty": "Easy", "language": "Python3", "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice.", "input_format": "nums: List[int], target: int", "output_format": "List[int]: indices of the two numbers", "constraints": "2 <= nums.length <= 10^4, -10^9 <= nums[i] <= 10^9, -10^9 <= target <= 10^9", "examples": "[2,7,11,15], target = 9 -> [0,1]", "test_cases": [{"input": "[2,7,11,15]\n9", "output": "[0,1]"}, {"input": "[3,2,4]\n6", "output": "[1,2]"}, {"input": "[3,3]\n6", "output": "[0,1]"}], "solution": "def twoSum(nums, target):\n    seen = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            return [seen[complement], i]\n        seen[num] = i\n    return []"}
{"id": "LCB_002", "title": "Palindrome Number", "difficulty": "Easy", "language": "Python3", "description": "Given an integer x, return true if x is a palindrome, and false otherwise.", "input_format": "x: int", "output_format": "bool: true if palindrome, false otherwise", "constraints": "-2^31 <= x <= 2^31 - 1", "examples": "121 -> true, -121 -> false", "test_cases": [{"input": "121", "output": "True"}, {"input": "-121", "output": "False"}, {"input": "10", "output": "False"}], "solution": "def isPalindrome(x):\n    if x < 0:\n        return False\n    return str(x) == str(x)[::-1]"}
{"id": "LCB_003", "title": "Valid Parentheses", "difficulty": "Easy", "language": "Python3", "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if: Open brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order.", "input_format": "s: str", "output_format": "bool: true if valid, false otherwise", "constraints": "1 <= s.length <= 10^4, s consists of parentheses only '()[]{}'", "examples": "() -> true, ()[]{} -> true, (] -> false", "test_cases": [{"input": "()", "output": "True"}, {"input": "()[]{}", "output": "True"}, {"input": "(]", "output": "False"}], "solution": "def isValid(s):\n    stack = []\n    brackets = {')': '(', '}': '{', ']': '['}\n    for char in s:\n        if char in '({[':\n            stack.append(char)\n        elif char in ')}]':\n            if not stack or stack.pop() != brackets[char]:\n                return False\n    return len(stack) == 0"}
